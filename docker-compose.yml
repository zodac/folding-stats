version: '2.3'

services:

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        # Docker image versions
        NODE_VERSION: 17
        # Build arguments
        FORUM_LINK: "${FORUM_LINK}"
        REST_ENDPOINT_URL: "${REST_ENDPOINT_URL}"
        ROOT_URL: "${ROOT_URL}"
        TITLE: "${TITLE}"
        UPDATE_ENABLED: "${STATS_ENABLED}"
    container_name: frontend
    hostname: frontend
    depends_on:
      - backend
    links:
      - backend
    networks:
      - production
    ports:
      - "${HTTPS_FRONTEND_PORT}:${HTTPS_FRONTEND_PORT}"
    restart: unless-stopped
    volumes_from:
      - backend

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      args:
        # Docker image versions
        DEBIAN_VERSION: 11.2
        JAVA_VERSION: 17
        MAVEN_VERSION: 3.8.4
        # Build arguments
        KEYSTORE_PASSWORD: "${KEYSTORE_PASSWORD}"
        NEXUS_URL: "${NEXUS_URL}"
    container_name: backend
    hostname: backend
    environment:
      # External URL configuration
      LARS_URL_ROOT: "${LARS_URL_ROOT}"
      STATS_URL_ROOT: "${STATS_URL_ROOT}"
      REDIRECT_URL: "${ROOT_URL}"
      # Spring configuration
      DEPLOYMENT_TYPE: "production"
      # NOTE: The monthly reset, result storage and LARS update will always occur at 23:57 on the last day of the month
      ENABLE_LARS_HARDWARE_UPDATE: "${ENABLE_LARS_HARDWARE_UPDATE}"
      ENABLE_MONTHLY_RESULT_STORAGE: "${ENABLE_MONTHLY_RESULT_STORAGE}"
      ENABLE_STATS_MONTHLY_RESET: "${ENABLE_STATS_MONTHLY_RESET}"
      # Scheduled stats parsing configuration
      # This value should match the value of 'UPDATE_ENABLED' in the 'frontend' container
      ENABLE_STATS_SCHEDULED_PARSING: "${STATS_ENABLED}"
      # Category configuration
      USERS_IN_AMD_GPU: "${USERS_IN_AMD_GPU}"
      USERS_IN_NVIDIA_GPU: "${USERS_IN_NVIDIA_GPU}"
      USERS_IN_WILDCARD: "${USERS_IN_WILDCARD}"
      # Database configuration
      DEPLOYED_DATABASE: "postgresql"
      JDBC_CONNECTION_URL: "jdbc:postgresql://database:${POSTGRES_PORT}/${POSTGRES_DB_NAME}"
      JDBC_CONNECTION_USER: "${DB_USER}"
      JDBC_CONNECTION_PASSWORD: "${DB_PASSWORD}"
      JDBC_CONNECTION_DRIVER: "org.postgresql.Driver"
      server.ssl.key-store-password: "${KEYSTORE_PASSWORD}"
    links:
      - database
    networks:
      - production
    ports:
      - "${HTTPS_BACKEND_PORT}:${HTTPS_BACKEND_PORT}"
    restart: unless-stopped
    volumes:
      - backend_certs:/usr/local/certs/
      - backend_logs:/var/backend/logs/

  database:
    build:
      context: .
      dockerfile: docker/database/Dockerfile
      args:
        # Docker image versions
        POSTGRES_VERSION: 14.1
        # Build arguments
        ADMIN_USERNAME: "${ADMIN_USER}"
        ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
        READ_ONLY_USERNAME: "${READ_ONLY_USER}"
        READ_ONLY_PASSWORD: "${READ_ONLY_PASSWORD}"
    container_name: database
    hostname: database
    environment:
      # First 4 variables used to configure DB
      POSTGRES_DB: "${POSTGRES_DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      # Next 3 variables needed to avoid "FATAL role 'root' does not exist" error
      PGDATABASE: "${POSTGRES_DB_NAME}"
      PGUSER: "${DB_USER}"
      PGPASSWORD: "${DB_PASSWORD}"
    healthcheck:
      test: pg_isready --host localhost || exit 1
      interval: 15s
      timeout: 10s
      retries: 30
    networks:
      - production
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: unless-stopped
    volumes:
      - database_content:/var/lib/postgresql/data

  prometheus:
    build:
      context: .
      dockerfile: docker/metrics/prometheus/Dockerfile
    container_name: prometheus
    hostname: prometheus
    depends_on:
      - backend
    networks:
      - production
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus

networks:
  production:

volumes:
  # Volume to save the database contents
  database_content:
  # Volume to save the backend logs in case of a crash
  backend_logs:
  # Volume to save the generated SSL certs for the backend
  backend_certs:
  # Volume to save prometheus metrics
  prometheus_data:
