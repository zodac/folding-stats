<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>me.zodac</groupId>
    <artifactId>folding-stats</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>[${project.artifactId}] project</name>

    <!-- Not defining any modules at the top-level -->
    <!-- Instead, we will define a profile which is activated by default -->
    <!-- This allows us to use another profile with fewer (or no) modules in CI -->
    <!-- However, it does force us to add all modules to any other profile we might define -->
    <modules/>

    <properties>
        <!-- Project Settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java-release>11</java-release>

        <!-- Lint Properties -->
        <skip-linters>true</skip-linters>
        <skip-sonar>true</skip-sonar>

        <!-- Test Properties -->
        <skip-integration-tests>true</skip-integration-tests>
        <skip-unit-tests>true</skip-unit-tests>

        <!-- 3PP Versions -->
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <commons-text.version>1.9</commons-text.version>
        <commons-validator.version>1.7</commons-validator.version>
        <gson.version>2.8.8</gson.version>
        <hikariCP.version>5.0.0</hikariCP.version>
        <javaee-web-api.version>8.0.1</javaee-web-api.version>
        <jersey.version>3.0.3</jersey.version>
        <jersey-server.version>1.19.4</jersey-server.version>
        <jooq.version>3.15.3</jooq.version>
        <jsoup.version>1.14.3</jsoup.version>
        <log4j.version>2.14.1</log4j.version>
        <lombok.version>1.18.22</lombok.version>
        <postgresql-driver.version>42.3.0</postgresql-driver.version>

        <!-- Test 3PP Versions -->
        <assertj-core.version>3.21.0</assertj-core.version>
        <embedded-postgres.version>1.2.7</embedded-postgres.version>
        <!-- Version should be the same as the postgres docker image version, where possible -->
        <embedded-postgres-binaries-bom.version>13.4.0</embedded-postgres-binaries-bom.version>
        <flyway-core>8.0.1</flyway-core>
        <junit.version>5.8.1</junit.version>

        <!-- Plugin Versions -->
        <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.2.0</maven-dependency-plugin.version>
        <maven-failsafe-plugin.version>3.0.0-M5</maven-failsafe-plugin.version>
        <maven-install-plugin.version>3.0.0-M1</maven-install-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
        <maven-war-plugin.version>3.3.2</maven-war-plugin.version>
        <versions-maven-plugin.version>2.8.1</versions-maven-plugin.version>

        <!-- Linter 3PP Versions -->
        <checkstyle.version>9.0.1</checkstyle.version>
        <errorprone.version>2.9.0</errorprone.version>
        <spotbugs.version>4.4.1</spotbugs.version>
        <pmd.version>6.39.0</pmd.version>

        <!-- Linter Plugin Versions -->
        <maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
        <maven-javadoc-plugin.version>3.3.1</maven-javadoc-plugin.version>
        <maven-pmd-plugin.version>3.15.0</maven-pmd-plugin.version>
        <sonar-maven-plugin.version>3.9.0.2155</sonar-maven-plugin.version>
        <spotbugs-maven-plugin.version>4.4.1</spotbugs-maven-plugin.version>

        <!-- Linter Properties -->
        <!--suppress UnresolvedMavenProperty, file is only used in child modules -->
        <checkstyle-file>${project.parent.basedir}/ci/checkstyle.xml</checkstyle-file>
        <!--suppress UnresolvedMavenProperty, file is only used in child modules -->
        <spotbugs-exclude-file>${project.parent.basedir}/ci/spotbugs-exclude-filter-file.xml</spotbugs-exclude-file>
        <!--suppress UnresolvedMavenProperty, file is only used in child modules -->
        <pmd-ruleset>${project.parent.basedir}/ci/pmd-ruleset.xml</pmd-ruleset>

        <!-- SonarQube server properties -->
        <!-- Using own local SonarQube, can't guarantee availability or credentials -->
        <sonar.host.url>http://192.168.99.100:9005</sonar.host.url>
        <sonar.login>6d6bed1c5fec1efbc656f4bcaf8eee6e8823db19</sonar.login>
        <!-- Exclude generated files -->
        <sonar.exclusions>**/gen/**/*</sonar.exclusions>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Project Dependencies -->
            <dependency>
                <groupId>me.zodac</groupId>
                <artifactId>folding-stats-api</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.zodac</groupId>
                <artifactId>folding-stats-client-library-java</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.zodac</groupId>
                <artifactId>folding-stats-jar</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- 3PP Dependencies -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${commons-text.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-validator</groupId>
                <artifactId>commons-validator</artifactId>
                <version>${commons-validator.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.zaxxer</groupId>
                <artifactId>HikariCP</artifactId>
                <version>${hikariCP.version}</version>
            </dependency>
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-web-api</artifactId>
                <version>${javaee-web-api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-servlet</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.media</groupId>
                <artifactId>jersey-media-multipart</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-meta</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${jsoup.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql-driver.version}</version>
            </dependency>

            <!-- Test Dependencies -->
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj-core.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.zonky.test</groupId>
                <artifactId>embedded-postgres</artifactId>
                <version>${embedded-postgres.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.zonky.test.postgres</groupId>
                <artifactId>embedded-postgres-binaries-bom</artifactId>
                <version>${embedded-postgres-binaries-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway-core}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey-server.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven-clean-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <release>${java-release}</release>

                        <!-- Configuration for errorprone compiler checks -->
                        <annotationProcessorPaths>
                            <path>
                                <groupId>com.google.errorprone</groupId>
                                <artifactId>error_prone_core</artifactId>
                                <version>${errorprone.version}</version>
                            </path>

                            <!-- The errorprone checks will fail unless Lombok is also added -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                        <fork>true</fork>
                        <compilerArgs>
                            <arg>-Xlint:all</arg>
                            <arg>-Xdoclint:all</arg>
                            <!-- Configuration for ErrorProne -->
                            <arg>-XDcompilePolicy=simple</arg>
                            <arg>-Xplugin:ErrorProne</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                            <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
                            <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven-failsafe-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
                        <skipTests>${skip-unit-tests}</skipTests>
                        <includes>
                            <include>**/*Test.java</include>
                        </includes>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven-war-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions-maven-plugin.version}</version>
                    <configuration>
                        <generateBackupPoms>false</generateBackupPoms>
                        <!-- Remove dependency properties that cause issues until manually updated -->
                        <excludeProperties>embedded-postgres.version</excludeProperties>
                    </configuration>
                </plugin>

                <!-- Linters -->

                <!-- Manual execution: -->
                <!-- mvn clean install checkstyle:checkstyle -Dskip-linters=false -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${maven-checkstyle-plugin.version}</version>
                    <configuration>
                        <configLocation>${checkstyle-file}</configLocation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                        <!--suppress UnresolvedMavenProperty, file is only used in child modules -->
                        <propertyExpansion>checkstyle.config.path=${project.parent.basedir}/ci</propertyExpansion>
                        <skip>${skip-linters}</skip>
                        <violationSeverity>info</violationSeverity>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                            <phase>validate</phase>
                        </execution>
                    </executions>

                    <!-- Overwrite the default version of Checkstyle -->
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>${checkstyle.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Manual execution: -->
                <!-- mvn clean install javadoc:javadoc -Dskip-linters=false -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <configuration>
                        <doclint>all</doclint>
                        <excludePackageNames>
                            me.zodac.folding.db.postgres.gen:me.zodac.folding.db.postgres.gen.*
                        </excludePackageNames>
                        <!-- TODO: [zodac] Enable -->
                        <failOnWarnings>false</failOnWarnings>
                        <quiet>true</quiet>
                        <serialwarn>true</serialwarn>
                        <skip>${skip-linters}</skip>
                        <validateLinks>true</validateLinks>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>javadoc</goal>
                            </goals>
                            <phase>install</phase>
                        </execution>
                    </executions>
                </plugin>

                <!-- Manual execution: -->
                <!-- mvn clean install pmd:check -Dskip-linters=false -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-pmd-plugin</artifactId>
                    <version>${maven-pmd-plugin.version}</version>

                    <!-- Overwrite the default version of PMD -->
                    <dependencies>
                        <dependency>
                            <groupId>net.sourceforge.pmd</groupId>
                            <artifactId>pmd-core</artifactId>
                            <version>${pmd.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>net.sourceforge.pmd</groupId>
                            <artifactId>pmd-java</artifactId>
                            <version>${pmd.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>net.sourceforge.pmd</groupId>
                            <artifactId>pmd-javascript</artifactId>
                            <version>${pmd.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>net.sourceforge.pmd</groupId>
                            <artifactId>pmd-jsp</artifactId>
                            <version>${pmd.version}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <excludes>
                            <!-- Generated classes -->
                            <exclude>**/gen/*.java</exclude>
                            <exclude>**/gen/**/*.java</exclude>
                        </excludes>
                        <failOnViolation>true</failOnViolation>
                        <includeTests>true</includeTests>
                        <linkXRef>false</linkXRef>
                        <printFailingErrors>true</printFailingErrors>
                        <rulesets>
                            <ruleset>${pmd-ruleset}</ruleset>
                        </rulesets>
                        <skip>${skip-linters}</skip>
                        <sourceEncoding>utf-8</sourceEncoding>
                        <targetJdk>${java-release}</targetJdk>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                            <phase>install</phase>
                        </execution>
                    </executions>
                </plugin>

                <!-- Manual execution: -->
                <!-- mvn clean install mvn sonar:sonar -Dskip-sonar=false -->
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${sonar-maven-plugin.version}</version>
                    <configuration>
                        <sonar.skip>${skip-sonar}</sonar.skip>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>install</phase>
                            <goals>
                                <goal>sonar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Manual execution: -->
                <!-- mvn clean install spotbugs:spotbugs -Dskip-linters=false -->
                <plugin>
                    <groupId>com.github.spotbugs</groupId>
                    <artifactId>spotbugs-maven-plugin</artifactId>
                    <version>${spotbugs-maven-plugin.version}</version>
                    <configuration>
                        <excludeFilterFile>${spotbugs-exclude-file}</excludeFilterFile>
                        <skip>${skip-linters}</skip>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                            <phase>install</phase>
                        </execution>
                    </executions>
                    <dependencies>
                        <!-- Overwrite the default version of Spotbugs -->
                        <dependency>
                            <groupId>com.github.spotbugs</groupId>
                            <artifactId>spotbugs</artifactId>
                            <version>${spotbugs.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Default profile with all child modules listed -->
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>default</name>
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
        </profile>

        <!-- Profile used to build the parent in docker, without needing to rely on the child modules -->
        <profile>
            <id>docker</id>
            <activation>
                <property>
                    <name>docker</name>
                </property>
            </activation>
            <modules/>
        </profile>

        <!-- Profile to run both tests and linters -->
        <profile>
            <id>activate_all</id>
            <activation>
                <property>
                    <name>ts</name> <!-- Name means 'testsuite', but it's just what I'm used to running from work -->
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
            <properties>
                <skip-integration-tests>false</skip-integration-tests>
                <skip-linters>false</skip-linters>
                <skip-sonar>false</skip-sonar>
                <skip-unit-tests>false</skip-unit-tests>
            </properties>
        </profile>

        <!-- Profile used to execute each module's linters (if any) -->
        <profile>
            <id>activate_linters</id>
            <activation>
                <property>
                    <name>lint</name>
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
            <properties>
                <skip-linters>false</skip-linters>
            </properties>
        </profile>

        <!-- Profile used to execute SonarQube analysis on the project -->
        <!-- Using a separate profile to linters since the SonarQube server may not be available -->
        <profile>
            <id>activate_sonar</id>
            <activation>
                <property>
                    <name>sonar</name>
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
            <properties>
                <skip-sonar>false</skip-sonar>
            </properties>
        </profile>

        <!-- Profile used to execute each module's testsuite (if any) -->
        <profile>
            <id>activate_tests</id>
            <activation>
                <property>
                    <name>tests</name>
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
            <properties>
                <skip-integration-tests>false</skip-integration-tests>
                <skip-unit-tests>false</skip-unit-tests>
            </properties>
        </profile>

        <!-- Profile used to execute each module's unit testsuite (if any) -->
        <profile>
            <id>activate_unit_tests</id>
            <activation>
                <property>
                    <name>unit-tests</name>
                </property>
            </activation>
            <modules>
                <module>folding-stats-api</module>
                <module>folding-stats-client-library-java</module>
                <module>folding-stats-jar</module>
                <module>folding-stats-war</module>
                <module>stubbed-folding-endpoints-war</module>
                <module>testsuite</module>
            </modules>
            <properties>
                <skip-integration-tests>true</skip-integration-tests>
                <skip-unit-tests>false</skip-unit-tests>
            </properties>
        </profile>

        <!-- Profile used to execute each module's integration testsuite (if any) -->
        <profile>
            <id>activate_integration_tests</id>
            <activation>
                <property>
                    <name>integration-tests</name>
                </property>
            </activation>
            <properties>
                <skip-integration-tests>false</skip-integration-tests>
                <skip-unit-tests>true</skip-unit-tests>
            </properties>
        </profile>
    </profiles>
</project>