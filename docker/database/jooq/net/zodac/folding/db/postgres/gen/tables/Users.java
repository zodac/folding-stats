/*
 * This file is generated by jOOQ.
 */
package net.zodac.folding.db.postgres.gen.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.zodac.folding.db.postgres.gen.Indexes;
import net.zodac.folding.db.postgres.gen.Keys;
import net.zodac.folding.db.postgres.gen.Public;
import net.zodac.folding.db.postgres.gen.tables.Hardware.HardwarePath;
import net.zodac.folding.db.postgres.gen.tables.Teams.TeamsPath;
import net.zodac.folding.db.postgres.gen.tables.UserChanges.UserChangesPath;
import net.zodac.folding.db.postgres.gen.tables.UserInitialStats.UserInitialStatsPath;
import net.zodac.folding.db.postgres.gen.tables.UserOffsetTcStats.UserOffsetTcStatsPath;
import net.zodac.folding.db.postgres.gen.tables.UserTcStatsHourly.UserTcStatsHourlyPath;
import net.zodac.folding.db.postgres.gen.tables.UserTotalStats.UserTotalStatsPath;
import net.zodac.folding.db.postgres.gen.tables.records.UsersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.user_id</code>.
     */
    public final TableField<UsersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users.folding_username</code>.
     */
    public final TableField<UsersRecord, String> FOLDING_USERNAME = createField(DSL.name("folding_username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.display_username</code>.
     */
    public final TableField<UsersRecord, String> DISPLAY_USERNAME = createField(DSL.name("display_username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.passkey</code>.
     */
    public final TableField<UsersRecord, String> PASSKEY = createField(DSL.name("passkey"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.category</code>.
     */
    public final TableField<UsersRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.profile_link</code>.
     */
    public final TableField<UsersRecord, String> PROFILE_LINK = createField(DSL.name("profile_link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.live_stats_link</code>.
     */
    public final TableField<UsersRecord, String> LIVE_STATS_LINK = createField(DSL.name("live_stats_link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.hardware_id</code>.
     */
    public final TableField<UsersRecord, Integer> HARDWARE_ID = createField(DSL.name("hardware_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users.team_id</code>.
     */
    public final TableField<UsersRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users.is_captain</code>.
     */
    public final TableField<UsersRecord, Boolean> IS_CAPTAIN = createField(DSL.name("is_captain"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_USER_ID);
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return (Identity<UsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_USER);
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS__FK_HARDWARE_ID, Keys.USERS__FK_TEAM_ID);
    }

    private transient HardwarePath _hardware;

    /**
     * Get the implicit join path to the <code>public.hardware</code> table.
     */
    public HardwarePath hardware() {
        if (_hardware == null)
            _hardware = new HardwarePath(this, Keys.USERS__FK_HARDWARE_ID, null);

        return _hardware;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.USERS__FK_TEAM_ID, null);

        return _teams;
    }

    private transient UserChangesPath _userChanges;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_changes</code> table
     */
    public UserChangesPath userChanges() {
        if (_userChanges == null)
            _userChanges = new UserChangesPath(this, null, Keys.USER_CHANGES__FK_USER_ID.getInverseKey());

        return _userChanges;
    }

    private transient UserInitialStatsPath _userInitialStats;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_initial_stats</code> table
     */
    public UserInitialStatsPath userInitialStats() {
        if (_userInitialStats == null)
            _userInitialStats = new UserInitialStatsPath(this, null, Keys.USER_INITIAL_STATS__FK_USER_ID.getInverseKey());

        return _userInitialStats;
    }

    private transient UserOffsetTcStatsPath _userOffsetTcStats;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_offset_tc_stats</code> table
     */
    public UserOffsetTcStatsPath userOffsetTcStats() {
        if (_userOffsetTcStats == null)
            _userOffsetTcStats = new UserOffsetTcStatsPath(this, null, Keys.USER_OFFSET_TC_STATS__FK_USER_ID.getInverseKey());

        return _userOffsetTcStats;
    }

    private transient UserTcStatsHourlyPath _userTcStatsHourly;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_tc_stats_hourly</code> table
     */
    public UserTcStatsHourlyPath userTcStatsHourly() {
        if (_userTcStatsHourly == null)
            _userTcStatsHourly = new UserTcStatsHourlyPath(this, null, Keys.USER_TC_STATS_HOURLY__FK_USER_ID.getInverseKey());

        return _userTcStatsHourly;
    }

    private transient UserTotalStatsPath _userTotalStats;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_total_stats</code> table
     */
    public UserTotalStatsPath userTotalStats() {
        if (_userTotalStats == null)
            _userTotalStats = new UserTotalStatsPath(this, null, Keys.USER_TOTAL_STATS__FK_USER_ID.getInverseKey());

        return _userTotalStats;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
