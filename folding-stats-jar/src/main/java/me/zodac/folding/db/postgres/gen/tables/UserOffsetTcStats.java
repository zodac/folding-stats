/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.UserOffsetTcStatsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOffsetTcStats extends TableImpl<UserOffsetTcStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_offset_tc_stats</code>
     */
    public static final UserOffsetTcStats USER_OFFSET_TC_STATS = new UserOffsetTcStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserOffsetTcStatsRecord> getRecordType() {
        return UserOffsetTcStatsRecord.class;
    }

    /**
     * The column <code>public.user_offset_tc_stats.user_id</code>.
     */
    public final TableField<UserOffsetTcStatsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_offset_tc_stats.utc_timestamp</code>.
     */
    public final TableField<UserOffsetTcStatsRecord, LocalDateTime> UTC_TIMESTAMP = createField(DSL.name("utc_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.user_offset_tc_stats.offset_points</code>.
     */
    public final TableField<UserOffsetTcStatsRecord, Long> OFFSET_POINTS = createField(DSL.name("offset_points"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_offset_tc_stats.offset_multiplied_points</code>.
     */
    public final TableField<UserOffsetTcStatsRecord, Long> OFFSET_MULTIPLIED_POINTS = createField(DSL.name("offset_multiplied_points"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_offset_tc_stats.offset_units</code>.
     */
    public final TableField<UserOffsetTcStatsRecord, Integer> OFFSET_UNITS = createField(DSL.name("offset_units"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserOffsetTcStats(Name alias, Table<UserOffsetTcStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserOffsetTcStats(Name alias, Table<UserOffsetTcStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_offset_tc_stats</code> table reference
     */
    public UserOffsetTcStats(String alias) {
        this(DSL.name(alias), USER_OFFSET_TC_STATS);
    }

    /**
     * Create an aliased <code>public.user_offset_tc_stats</code> table reference
     */
    public UserOffsetTcStats(Name alias) {
        this(alias, USER_OFFSET_TC_STATS);
    }

    /**
     * Create a <code>public.user_offset_tc_stats</code> table reference
     */
    public UserOffsetTcStats() {
        this(DSL.name("user_offset_tc_stats"), null);
    }

    public <O extends Record> UserOffsetTcStats(Table<O> child, ForeignKey<O, UserOffsetTcStatsRecord> key) {
        super(child, key, USER_OFFSET_TC_STATS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_USER_OFFSET_TC_STATS);
    }

    @Override
    public UniqueKey<UserOffsetTcStatsRecord> getPrimaryKey() {
        return Keys.USER_OFFSET_TC_STATS_PKEY;
    }

    @Override
    public List<UniqueKey<UserOffsetTcStatsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserOffsetTcStatsRecord>>asList(Keys.USER_OFFSET_TC_STATS_PKEY, Keys.USER_OFFSET_TC_STATS_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<UserOffsetTcStatsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserOffsetTcStatsRecord, ?>>asList(Keys.USER_OFFSET_TC_STATS__FK_USER_ID);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_OFFSET_TC_STATS__FK_USER_ID);

        return _users;
    }

    @Override
    public UserOffsetTcStats as(String alias) {
        return new UserOffsetTcStats(DSL.name(alias), this);
    }

    @Override
    public UserOffsetTcStats as(Name alias) {
        return new UserOffsetTcStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOffsetTcStats rename(String name) {
        return new UserOffsetTcStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOffsetTcStats rename(Name name) {
        return new UserOffsetTcStats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, Long, Long, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
