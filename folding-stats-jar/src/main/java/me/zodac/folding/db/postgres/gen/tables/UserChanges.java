/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.UserChangesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserChanges extends TableImpl<UserChangesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_changes</code>
     */
    public static final UserChanges USER_CHANGES = new UserChanges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserChangesRecord> getRecordType() {
        return UserChangesRecord.class;
    }

    /**
     * The column <code>public.user_changes.change_id</code>.
     */
    public final TableField<UserChangesRecord, Integer> CHANGE_ID = createField(DSL.name("change_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_changes.created_utc_timestamp</code>.
     */
    public final TableField<UserChangesRecord, LocalDateTime> CREATED_UTC_TIMESTAMP = createField(DSL.name("created_utc_timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user_changes.updated_utc_timestamp</code>.
     */
    public final TableField<UserChangesRecord, LocalDateTime> UPDATED_UTC_TIMESTAMP = createField(DSL.name("updated_utc_timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user_changes.json_change_request</code>.
     */
    public final TableField<UserChangesRecord, String> JSON_CHANGE_REQUEST = createField(DSL.name("json_change_request"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_changes.state</code>.
     */
    public final TableField<UserChangesRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.nullable(false), this, "");

    private UserChanges(Name alias, Table<UserChangesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserChanges(Name alias, Table<UserChangesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_changes</code> table reference
     */
    public UserChanges(String alias) {
        this(DSL.name(alias), USER_CHANGES);
    }

    /**
     * Create an aliased <code>public.user_changes</code> table reference
     */
    public UserChanges(Name alias) {
        this(alias, USER_CHANGES);
    }

    /**
     * Create a <code>public.user_changes</code> table reference
     */
    public UserChanges() {
        this(DSL.name("user_changes"), null);
    }

    public <O extends Record> UserChanges(Table<O> child, ForeignKey<O, UserChangesRecord> key) {
        super(child, key, USER_CHANGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_USER_CHANGES_ID, Indexes.INDEX_USER_CHANGES_STATE);
    }

    @Override
    public Identity<UserChangesRecord, Integer> getIdentity() {
        return (Identity<UserChangesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserChangesRecord> getPrimaryKey() {
        return Keys.USER_CHANGES_PKEY;
    }

    @Override
    public List<UniqueKey<UserChangesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserChangesRecord>>asList(Keys.USER_CHANGES_PKEY);
    }

    @Override
    public UserChanges as(String alias) {
        return new UserChanges(DSL.name(alias), this);
    }

    @Override
    public UserChanges as(Name alias) {
        return new UserChanges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChanges rename(String name) {
        return new UserChanges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChanges rename(Name name) {
        return new UserChanges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
