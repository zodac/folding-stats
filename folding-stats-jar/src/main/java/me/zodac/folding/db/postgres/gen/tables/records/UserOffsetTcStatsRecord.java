/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables.records;


import java.time.LocalDateTime;

import me.zodac.folding.db.postgres.gen.tables.UserOffsetTcStats;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOffsetTcStatsRecord extends UpdatableRecordImpl<UserOffsetTcStatsRecord> implements Record5<Integer, LocalDateTime, Long, Long, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_offset_tc_stats.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_offset_tc_stats.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.user_offset_tc_stats.utc_timestamp</code>.
     */
    public void setUtcTimestamp(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_offset_tc_stats.utc_timestamp</code>.
     */
    public LocalDateTime getUtcTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.user_offset_tc_stats.offset_points</code>.
     */
    public void setOffsetPoints(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_offset_tc_stats.offset_points</code>.
     */
    public Long getOffsetPoints() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.user_offset_tc_stats.offset_multiplied_points</code>.
     */
    public void setOffsetMultipliedPoints(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.user_offset_tc_stats.offset_multiplied_points</code>.
     */
    public Long getOffsetMultipliedPoints() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.user_offset_tc_stats.offset_units</code>.
     */
    public void setOffsetUnits(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.user_offset_tc_stats.offset_units</code>.
     */
    public Integer getOffsetUnits() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, LocalDateTime> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, Long, Long, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, LocalDateTime, Long, Long, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return UserOffsetTcStats.USER_OFFSET_TC_STATS.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return UserOffsetTcStats.USER_OFFSET_TC_STATS.UTC_TIMESTAMP;
    }

    @Override
    public Field<Long> field3() {
        return UserOffsetTcStats.USER_OFFSET_TC_STATS.OFFSET_POINTS;
    }

    @Override
    public Field<Long> field4() {
        return UserOffsetTcStats.USER_OFFSET_TC_STATS.OFFSET_MULTIPLIED_POINTS;
    }

    @Override
    public Field<Integer> field5() {
        return UserOffsetTcStats.USER_OFFSET_TC_STATS.OFFSET_UNITS;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public LocalDateTime component2() {
        return getUtcTimestamp();
    }

    @Override
    public Long component3() {
        return getOffsetPoints();
    }

    @Override
    public Long component4() {
        return getOffsetMultipliedPoints();
    }

    @Override
    public Integer component5() {
        return getOffsetUnits();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public LocalDateTime value2() {
        return getUtcTimestamp();
    }

    @Override
    public Long value3() {
        return getOffsetPoints();
    }

    @Override
    public Long value4() {
        return getOffsetMultipliedPoints();
    }

    @Override
    public Integer value5() {
        return getOffsetUnits();
    }

    @Override
    public UserOffsetTcStatsRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserOffsetTcStatsRecord value2(LocalDateTime value) {
        setUtcTimestamp(value);
        return this;
    }

    @Override
    public UserOffsetTcStatsRecord value3(Long value) {
        setOffsetPoints(value);
        return this;
    }

    @Override
    public UserOffsetTcStatsRecord value4(Long value) {
        setOffsetMultipliedPoints(value);
        return this;
    }

    @Override
    public UserOffsetTcStatsRecord value5(Integer value) {
        setOffsetUnits(value);
        return this;
    }

    @Override
    public UserOffsetTcStatsRecord values(Integer value1, LocalDateTime value2, Long value3, Long value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserOffsetTcStatsRecord
     */
    public UserOffsetTcStatsRecord() {
        super(UserOffsetTcStats.USER_OFFSET_TC_STATS);
    }

    /**
     * Create a detached, initialised UserOffsetTcStatsRecord
     */
    public UserOffsetTcStatsRecord(Integer userId, LocalDateTime utcTimestamp, Long offsetPoints, Long offsetMultipliedPoints, Integer offsetUnits) {
        super(UserOffsetTcStats.USER_OFFSET_TC_STATS);

        setUserId(userId);
        setUtcTimestamp(utcTimestamp);
        setOffsetPoints(offsetPoints);
        setOffsetMultipliedPoints(offsetMultipliedPoints);
        setOffsetUnits(offsetUnits);
    }
}
