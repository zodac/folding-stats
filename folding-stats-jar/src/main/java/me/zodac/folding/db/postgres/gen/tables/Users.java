/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.util.Arrays;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.UsersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.user_id</code>.
     */
    public final TableField<UsersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users.folding_username</code>.
     */
    public final TableField<UsersRecord, String> FOLDING_USERNAME = createField(DSL.name("folding_username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.display_username</code>.
     */
    public final TableField<UsersRecord, String> DISPLAY_USERNAME = createField(DSL.name("display_username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.passkey</code>.
     */
    public final TableField<UsersRecord, String> PASSKEY = createField(DSL.name("passkey"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.category</code>.
     */
    public final TableField<UsersRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.profile_link</code>.
     */
    public final TableField<UsersRecord, String> PROFILE_LINK = createField(DSL.name("profile_link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.live_stats_link</code>.
     */
    public final TableField<UsersRecord, String> LIVE_STATS_LINK = createField(DSL.name("live_stats_link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.hardware_id</code>.
     */
    public final TableField<UsersRecord, Integer> HARDWARE_ID = createField(DSL.name("hardware_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users.team_id</code>.
     */
    public final TableField<UsersRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users.is_captain</code>.
     */
    public final TableField<UsersRecord, Boolean> IS_CAPTAIN = createField(DSL.name("is_captain"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_USER_ID);
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return (Identity<UsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY, Keys.UNIQUE_USER);
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRecord, ?>>asList(Keys.USERS__FK_HARDWARE_ID, Keys.USERS__FK_TEAM_ID);
    }

    private transient Hardware _hardware;
    private transient Teams _teams;

    public Hardware hardware() {
        if (_hardware == null)
            _hardware = new Hardware(this, Keys.USERS__FK_HARDWARE_ID);

        return _hardware;
    }

    public Teams teams() {
        if (_teams == null)
            _teams = new Teams(this, Keys.USERS__FK_TEAM_ID);

        return _teams;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, String, Integer, Integer, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
