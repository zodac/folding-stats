/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables.records;


import java.time.LocalDateTime;

import me.zodac.folding.db.postgres.gen.tables.UserChanges;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserChangesRecord extends UpdatableRecordImpl<UserChangesRecord> implements Record7<Integer, LocalDateTime, LocalDateTime, Integer, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_changes.user_change_id</code>.
     */
    public void setUserChangeId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_changes.user_change_id</code>.
     */
    public Integer getUserChangeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.user_changes.created_utc_timestamp</code>.
     */
    public void setCreatedUtcTimestamp(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_changes.created_utc_timestamp</code>.
     */
    public LocalDateTime getCreatedUtcTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.user_changes.updated_utc_timestamp</code>.
     */
    public void setUpdatedUtcTimestamp(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_changes.updated_utc_timestamp</code>.
     */
    public LocalDateTime getUpdatedUtcTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.user_changes.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.user_changes.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.user_changes.previous_user</code>.
     */
    public void setPreviousUser(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.user_changes.previous_user</code>.
     */
    public String getPreviousUser() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.user_changes.new_user</code>.
     */
    public void setNewUser(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.user_changes.new_user</code>.
     */
    public String getNewUser() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.user_changes.state</code>.
     */
    public void setState(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.user_changes.state</code>.
     */
    public String getState() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, LocalDateTime, Integer, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, LocalDateTime, LocalDateTime, Integer, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return UserChanges.USER_CHANGES.USER_CHANGE_ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return UserChanges.USER_CHANGES.CREATED_UTC_TIMESTAMP;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return UserChanges.USER_CHANGES.UPDATED_UTC_TIMESTAMP;
    }

    @Override
    public Field<Integer> field4() {
        return UserChanges.USER_CHANGES.USER_ID;
    }

    @Override
    public Field<String> field5() {
        return UserChanges.USER_CHANGES.PREVIOUS_USER;
    }

    @Override
    public Field<String> field6() {
        return UserChanges.USER_CHANGES.NEW_USER;
    }

    @Override
    public Field<String> field7() {
        return UserChanges.USER_CHANGES.STATE;
    }

    @Override
    public Integer component1() {
        return getUserChangeId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedUtcTimestamp();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdatedUtcTimestamp();
    }

    @Override
    public Integer component4() {
        return getUserId();
    }

    @Override
    public String component5() {
        return getPreviousUser();
    }

    @Override
    public String component6() {
        return getNewUser();
    }

    @Override
    public String component7() {
        return getState();
    }

    @Override
    public Integer value1() {
        return getUserChangeId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedUtcTimestamp();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdatedUtcTimestamp();
    }

    @Override
    public Integer value4() {
        return getUserId();
    }

    @Override
    public String value5() {
        return getPreviousUser();
    }

    @Override
    public String value6() {
        return getNewUser();
    }

    @Override
    public String value7() {
        return getState();
    }

    @Override
    public UserChangesRecord value1(Integer value) {
        setUserChangeId(value);
        return this;
    }

    @Override
    public UserChangesRecord value2(LocalDateTime value) {
        setCreatedUtcTimestamp(value);
        return this;
    }

    @Override
    public UserChangesRecord value3(LocalDateTime value) {
        setUpdatedUtcTimestamp(value);
        return this;
    }

    @Override
    public UserChangesRecord value4(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserChangesRecord value5(String value) {
        setPreviousUser(value);
        return this;
    }

    @Override
    public UserChangesRecord value6(String value) {
        setNewUser(value);
        return this;
    }

    @Override
    public UserChangesRecord value7(String value) {
        setState(value);
        return this;
    }

    @Override
    public UserChangesRecord values(Integer value1, LocalDateTime value2, LocalDateTime value3, Integer value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserChangesRecord
     */
    public UserChangesRecord() {
        super(UserChanges.USER_CHANGES);
    }

    /**
     * Create a detached, initialised UserChangesRecord
     */
    public UserChangesRecord(Integer userChangeId, LocalDateTime createdUtcTimestamp, LocalDateTime updatedUtcTimestamp, Integer userId, String previousUser, String newUser, String state) {
        super(UserChanges.USER_CHANGES);

        setUserChangeId(userChangeId);
        setCreatedUtcTimestamp(createdUtcTimestamp);
        setUpdatedUtcTimestamp(updatedUtcTimestamp);
        setUserId(userId);
        setPreviousUser(previousUser);
        setNewUser(newUser);
        setState(state);
    }
}
