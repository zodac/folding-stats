/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.UserTcStatsHourlyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
public class UserTcStatsHourly extends TableImpl<UserTcStatsHourlyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_tc_stats_hourly</code>
     */
    public static final UserTcStatsHourly USER_TC_STATS_HOURLY = new UserTcStatsHourly();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTcStatsHourlyRecord> getRecordType() {
        return UserTcStatsHourlyRecord.class;
    }

    /**
     * The column <code>public.user_tc_stats_hourly.user_id</code>.
     */
    public final TableField<UserTcStatsHourlyRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_tc_stats_hourly.utc_timestamp</code>.
     */
    public final TableField<UserTcStatsHourlyRecord, LocalDateTime> UTC_TIMESTAMP = createField(DSL.name("utc_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.user_tc_stats_hourly.tc_points</code>.
     */
    public final TableField<UserTcStatsHourlyRecord, Long> TC_POINTS = createField(DSL.name("tc_points"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_tc_stats_hourly.tc_points_multiplied</code>.
     */
    public final TableField<UserTcStatsHourlyRecord, Long> TC_POINTS_MULTIPLIED = createField(DSL.name("tc_points_multiplied"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_tc_stats_hourly.tc_units</code>.
     */
    public final TableField<UserTcStatsHourlyRecord, Integer> TC_UNITS = createField(DSL.name("tc_units"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserTcStatsHourly(Name alias, Table<UserTcStatsHourlyRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTcStatsHourly(Name alias, Table<UserTcStatsHourlyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_tc_stats_hourly</code> table reference
     */
    public UserTcStatsHourly(String alias) {
        this(DSL.name(alias), USER_TC_STATS_HOURLY);
    }

    /**
     * Create an aliased <code>public.user_tc_stats_hourly</code> table reference
     */
    public UserTcStatsHourly(Name alias) {
        this(alias, USER_TC_STATS_HOURLY);
    }

    /**
     * Create a <code>public.user_tc_stats_hourly</code> table reference
     */
    public UserTcStatsHourly() {
        this(DSL.name("user_tc_stats_hourly"), null);
    }

    public <O extends Record> UserTcStatsHourly(Table<O> child, ForeignKey<O, UserTcStatsHourlyRecord> key) {
        super(child, key, USER_TC_STATS_HOURLY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_USER_TC_STATS_HOURLY);
    }

    @Override
    public UniqueKey<UserTcStatsHourlyRecord> getPrimaryKey() {
        return Keys.USER_TC_STATS_HOURLY_PKEY;
    }

    @Override
    public List<UniqueKey<UserTcStatsHourlyRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTcStatsHourlyRecord>>asList(Keys.USER_TC_STATS_HOURLY_PKEY);
    }

    @Override
    public List<ForeignKey<UserTcStatsHourlyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserTcStatsHourlyRecord, ?>>asList(Keys.USER_TC_STATS_HOURLY__FK_USER_ID);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_TC_STATS_HOURLY__FK_USER_ID);

        return _users;
    }

    @Override
    public UserTcStatsHourly as(String alias) {
        return new UserTcStatsHourly(DSL.name(alias), this);
    }

    @Override
    public UserTcStatsHourly as(Name alias) {
        return new UserTcStatsHourly(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTcStatsHourly rename(String name) {
        return new UserTcStatsHourly(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTcStatsHourly rename(Name name) {
        return new UserTcStatsHourly(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, Long, Long, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
