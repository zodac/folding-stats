/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.RetiredUserStatsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
public class RetiredUserStats extends TableImpl<RetiredUserStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.retired_user_stats</code>
     */
    public static final RetiredUserStats RETIRED_USER_STATS = new RetiredUserStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RetiredUserStatsRecord> getRecordType() {
        return RetiredUserStatsRecord.class;
    }

    /**
     * The column <code>public.retired_user_stats.retired_user_id</code>.
     */
    public final TableField<RetiredUserStatsRecord, Integer> RETIRED_USER_ID = createField(DSL.name("retired_user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.retired_user_stats.team_id</code>.
     */
    public final TableField<RetiredUserStatsRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.user_id</code>.
     */
    public final TableField<RetiredUserStatsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.display_username</code>.
     */
    public final TableField<RetiredUserStatsRecord, String> DISPLAY_USERNAME = createField(DSL.name("display_username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.utc_timestamp</code>.
     */
    public final TableField<RetiredUserStatsRecord, LocalDateTime> UTC_TIMESTAMP = createField(DSL.name("utc_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.final_points</code>.
     */
    public final TableField<RetiredUserStatsRecord, Long> FINAL_POINTS = createField(DSL.name("final_points"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.final_multiplied_points</code>.
     */
    public final TableField<RetiredUserStatsRecord, Long> FINAL_MULTIPLIED_POINTS = createField(DSL.name("final_multiplied_points"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.retired_user_stats.final_units</code>.
     */
    public final TableField<RetiredUserStatsRecord, Integer> FINAL_UNITS = createField(DSL.name("final_units"), SQLDataType.INTEGER.nullable(false), this, "");

    private RetiredUserStats(Name alias, Table<RetiredUserStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RetiredUserStats(Name alias, Table<RetiredUserStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.retired_user_stats</code> table reference
     */
    public RetiredUserStats(String alias) {
        this(DSL.name(alias), RETIRED_USER_STATS);
    }

    /**
     * Create an aliased <code>public.retired_user_stats</code> table reference
     */
    public RetiredUserStats(Name alias) {
        this(alias, RETIRED_USER_STATS);
    }

    /**
     * Create a <code>public.retired_user_stats</code> table reference
     */
    public RetiredUserStats() {
        this(DSL.name("retired_user_stats"), null);
    }

    public <O extends Record> RetiredUserStats(Table<O> child, ForeignKey<O, RetiredUserStatsRecord> key) {
        super(child, key, RETIRED_USER_STATS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_RETIRED_USER_STATS);
    }

    @Override
    public Identity<RetiredUserStatsRecord, Integer> getIdentity() {
        return (Identity<RetiredUserStatsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RetiredUserStatsRecord> getPrimaryKey() {
        return Keys.RETIRED_USER_STATS_PKEY;
    }

    @Override
    public List<UniqueKey<RetiredUserStatsRecord>> getKeys() {
        return Arrays.<UniqueKey<RetiredUserStatsRecord>>asList(Keys.RETIRED_USER_STATS_PKEY, Keys.RETIRED_USER_STATS_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<RetiredUserStatsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RetiredUserStatsRecord, ?>>asList(Keys.RETIRED_USER_STATS__FK_TEAM_ID);
    }

    private transient Teams _teams;

    public Teams teams() {
        if (_teams == null)
            _teams = new Teams(this, Keys.RETIRED_USER_STATS__FK_TEAM_ID);

        return _teams;
    }

    @Override
    public RetiredUserStats as(String alias) {
        return new RetiredUserStats(DSL.name(alias), this);
    }

    @Override
    public RetiredUserStats as(Name alias) {
        return new RetiredUserStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RetiredUserStats rename(String name) {
        return new RetiredUserStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RetiredUserStats rename(Name name) {
        return new RetiredUserStats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, String, LocalDateTime, Long, Long, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
