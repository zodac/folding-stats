/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.Users.UsersPath;
import me.zodac.folding.db.postgres.gen.tables.records.HardwareRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Hardware extends TableImpl<HardwareRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hardware</code>
     */
    public static final Hardware HARDWARE = new Hardware();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HardwareRecord> getRecordType() {
        return HardwareRecord.class;
    }

    /**
     * The column <code>public.hardware.hardware_id</code>.
     */
    public final TableField<HardwareRecord, Integer> HARDWARE_ID = createField(DSL.name("hardware_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.hardware.hardware_name</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_NAME = createField(DSL.name("hardware_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.display_name</code>.
     */
    public final TableField<HardwareRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.hardware_make</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_MAKE = createField(DSL.name("hardware_make"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.hardware_type</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_TYPE = createField(DSL.name("hardware_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.multiplier</code>.
     */
    public final TableField<HardwareRecord, BigDecimal> MULTIPLIER = createField(DSL.name("multiplier"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.hardware.average_ppd</code>.
     */
    public final TableField<HardwareRecord, BigDecimal> AVERAGE_PPD = createField(DSL.name("average_ppd"), SQLDataType.NUMERIC.nullable(false), this, "");

    private Hardware(Name alias, Table<HardwareRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Hardware(Name alias, Table<HardwareRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.hardware</code> table reference
     */
    public Hardware(String alias) {
        this(DSL.name(alias), HARDWARE);
    }

    /**
     * Create an aliased <code>public.hardware</code> table reference
     */
    public Hardware(Name alias) {
        this(alias, HARDWARE);
    }

    /**
     * Create a <code>public.hardware</code> table reference
     */
    public Hardware() {
        this(DSL.name("hardware"), null);
    }

    public <O extends Record> Hardware(Table<O> path, ForeignKey<O, HardwareRecord> childPath, InverseForeignKey<O, HardwareRecord> parentPath) {
        super(path, childPath, parentPath, HARDWARE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HardwarePath extends Hardware implements Path<HardwareRecord> {
        public <O extends Record> HardwarePath(Table<O> path, ForeignKey<O, HardwareRecord> childPath, InverseForeignKey<O, HardwareRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HardwarePath(Name alias, Table<HardwareRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HardwarePath as(String alias) {
            return new HardwarePath(DSL.name(alias), this);
        }

        @Override
        public HardwarePath as(Name alias) {
            return new HardwarePath(alias, this);
        }

        @Override
        public HardwarePath as(Table<?> alias) {
            return new HardwarePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_HARDWARE_ID);
    }

    @Override
    public Identity<HardwareRecord, Integer> getIdentity() {
        return (Identity<HardwareRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HardwareRecord> getPrimaryKey() {
        return Keys.HARDWARE_PKEY;
    }

    @Override
    public List<UniqueKey<HardwareRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.HARDWARE_HARDWARE_NAME_KEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit to-many join path to the <code>public.users</code> table
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, null, Keys.USERS__FK_HARDWARE_ID.getInverseKey());

        return _users;
    }

    @Override
    public Hardware as(String alias) {
        return new Hardware(DSL.name(alias), this);
    }

    @Override
    public Hardware as(Name alias) {
        return new Hardware(alias, this);
    }

    @Override
    public Hardware as(Table<?> alias) {
        return new Hardware(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hardware rename(String name) {
        return new Hardware(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hardware rename(Name name) {
        return new Hardware(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hardware rename(Table<?> name) {
        return new Hardware(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware where(Condition condition) {
        return new Hardware(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hardware where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hardware where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hardware where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hardware where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hardware whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
