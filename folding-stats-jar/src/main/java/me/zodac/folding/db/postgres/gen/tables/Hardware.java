/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.HardwareRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hardware extends TableImpl<HardwareRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hardware</code>
     */
    public static final Hardware HARDWARE = new Hardware();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HardwareRecord> getRecordType() {
        return HardwareRecord.class;
    }

    /**
     * The column <code>public.hardware.hardware_id</code>.
     */
    public final TableField<HardwareRecord, Integer> HARDWARE_ID = createField(DSL.name("hardware_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.hardware.hardware_name</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_NAME = createField(DSL.name("hardware_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.display_name</code>.
     */
    public final TableField<HardwareRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.hardware_make</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_MAKE = createField(DSL.name("hardware_make"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.hardware_type</code>.
     */
    public final TableField<HardwareRecord, String> HARDWARE_TYPE = createField(DSL.name("hardware_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.hardware.multiplier</code>.
     */
    public final TableField<HardwareRecord, BigDecimal> MULTIPLIER = createField(DSL.name("multiplier"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.hardware.average_ppd</code>.
     */
    public final TableField<HardwareRecord, BigDecimal> AVERAGE_PPD = createField(DSL.name("average_ppd"), SQLDataType.NUMERIC.nullable(false), this, "");

    private Hardware(Name alias, Table<HardwareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hardware(Name alias, Table<HardwareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.hardware</code> table reference
     */
    public Hardware(String alias) {
        this(DSL.name(alias), HARDWARE);
    }

    /**
     * Create an aliased <code>public.hardware</code> table reference
     */
    public Hardware(Name alias) {
        this(alias, HARDWARE);
    }

    /**
     * Create a <code>public.hardware</code> table reference
     */
    public Hardware() {
        this(DSL.name("hardware"), null);
    }

    public <O extends Record> Hardware(Table<O> child, ForeignKey<O, HardwareRecord> key) {
        super(child, key, HARDWARE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_HARDWARE_ID);
    }

    @Override
    public Identity<HardwareRecord, Integer> getIdentity() {
        return (Identity<HardwareRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HardwareRecord> getPrimaryKey() {
        return Keys.HARDWARE_PKEY;
    }

    @Override
    public List<UniqueKey<HardwareRecord>> getKeys() {
        return Arrays.<UniqueKey<HardwareRecord>>asList(Keys.HARDWARE_PKEY, Keys.HARDWARE_HARDWARE_NAME_KEY);
    }

    @Override
    public Hardware as(String alias) {
        return new Hardware(DSL.name(alias), this);
    }

    @Override
    public Hardware as(Name alias) {
        return new Hardware(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hardware rename(String name) {
        return new Hardware(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hardware rename(Name name) {
        return new Hardware(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
