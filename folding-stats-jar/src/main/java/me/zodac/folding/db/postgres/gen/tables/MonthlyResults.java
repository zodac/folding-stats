/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.MonthlyResultsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MonthlyResults extends TableImpl<MonthlyResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.monthly_results</code>
     */
    public static final MonthlyResults MONTHLY_RESULTS = new MonthlyResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonthlyResultsRecord> getRecordType() {
        return MonthlyResultsRecord.class;
    }

    /**
     * The column <code>public.monthly_results.utc_timestamp</code>.
     */
    public final TableField<MonthlyResultsRecord, LocalDateTime> UTC_TIMESTAMP = createField(DSL.name("utc_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.monthly_results.json_result</code>.
     */
    public final TableField<MonthlyResultsRecord, String> JSON_RESULT = createField(DSL.name("json_result"), SQLDataType.CLOB.nullable(false), this, "");

    private MonthlyResults(Name alias, Table<MonthlyResultsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MonthlyResults(Name alias, Table<MonthlyResultsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.monthly_results</code> table reference
     */
    public MonthlyResults(String alias) {
        this(DSL.name(alias), MONTHLY_RESULTS);
    }

    /**
     * Create an aliased <code>public.monthly_results</code> table reference
     */
    public MonthlyResults(Name alias) {
        this(alias, MONTHLY_RESULTS);
    }

    /**
     * Create a <code>public.monthly_results</code> table reference
     */
    public MonthlyResults() {
        this(DSL.name("monthly_results"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_MONTHLY_RESULTS);
    }

    @Override
    public UniqueKey<MonthlyResultsRecord> getPrimaryKey() {
        return Keys.MONTHLY_RESULTS_PKEY;
    }

    @Override
    public MonthlyResults as(String alias) {
        return new MonthlyResults(DSL.name(alias), this);
    }

    @Override
    public MonthlyResults as(Name alias) {
        return new MonthlyResults(alias, this);
    }

    @Override
    public MonthlyResults as(Table<?> alias) {
        return new MonthlyResults(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyResults rename(String name) {
        return new MonthlyResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyResults rename(Name name) {
        return new MonthlyResults(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyResults rename(Table<?> name) {
        return new MonthlyResults(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults where(Condition condition) {
        return new MonthlyResults(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyResults where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyResults where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyResults where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyResults where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyResults whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
