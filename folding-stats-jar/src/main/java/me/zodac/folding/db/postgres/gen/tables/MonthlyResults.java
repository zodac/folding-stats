/*
 * This file is generated by jOOQ.
 */
package me.zodac.folding.db.postgres.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.zodac.folding.db.postgres.gen.Indexes;
import me.zodac.folding.db.postgres.gen.Keys;
import me.zodac.folding.db.postgres.gen.Public;
import me.zodac.folding.db.postgres.gen.tables.records.MonthlyResultsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MonthlyResults extends TableImpl<MonthlyResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.monthly_results</code>
     */
    public static final MonthlyResults MONTHLY_RESULTS = new MonthlyResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonthlyResultsRecord> getRecordType() {
        return MonthlyResultsRecord.class;
    }

    /**
     * The column <code>public.monthly_results.utc_timestamp</code>.
     */
    public final TableField<MonthlyResultsRecord, LocalDateTime> UTC_TIMESTAMP = createField(DSL.name("utc_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.monthly_results.json_result</code>.
     */
    public final TableField<MonthlyResultsRecord, String> JSON_RESULT = createField(DSL.name("json_result"), SQLDataType.CLOB.nullable(false), this, "");

    private MonthlyResults(Name alias, Table<MonthlyResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MonthlyResults(Name alias, Table<MonthlyResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.monthly_results</code> table reference
     */
    public MonthlyResults(String alias) {
        this(DSL.name(alias), MONTHLY_RESULTS);
    }

    /**
     * Create an aliased <code>public.monthly_results</code> table reference
     */
    public MonthlyResults(Name alias) {
        this(alias, MONTHLY_RESULTS);
    }

    /**
     * Create a <code>public.monthly_results</code> table reference
     */
    public MonthlyResults() {
        this(DSL.name("monthly_results"), null);
    }

    public <O extends Record> MonthlyResults(Table<O> child, ForeignKey<O, MonthlyResultsRecord> key) {
        super(child, key, MONTHLY_RESULTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDEX_MONTHLY_RESULTS);
    }

    @Override
    public UniqueKey<MonthlyResultsRecord> getPrimaryKey() {
        return Keys.MONTHLY_RESULTS_PKEY;
    }

    @Override
    public List<UniqueKey<MonthlyResultsRecord>> getKeys() {
        return Arrays.<UniqueKey<MonthlyResultsRecord>>asList(Keys.MONTHLY_RESULTS_PKEY);
    }

    @Override
    public MonthlyResults as(String alias) {
        return new MonthlyResults(DSL.name(alias), this);
    }

    @Override
    public MonthlyResults as(Name alias) {
        return new MonthlyResults(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyResults rename(String name) {
        return new MonthlyResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyResults rename(Name name) {
        return new MonthlyResults(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<LocalDateTime, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
